import { reference } from '@/util';
import img1 from './1.png';

export const docString1 = `
#### **操作符（运算符）**

操作符的概念不用解释，很多与我们从小就十分熟悉的数学运算符是相通的。
从本节开始，我们将要真正开启代码之旅了。为了便于前期的预备知识随时回顾，在有必要的地方，教程也会提供回顾的入口。

#### **基本的数学运算符**

现在打开控制台（[怎么打开](/overview/html/example)），这次我们切换到 ${reference('Console')} 栏：

![控制台](${img1})

> 在空白处输入下表第三列的表达式并回车，看看显示了什么结果。**切记，所有的字符包含标点均应使用英文输入法输入。**

> 控制台声明变量的时候，如果回车后再次声明同一变量名，会报出该变量已声明的错误。这时候刷新浏览器或者换个变量名即可。

> 想在控制台打印某个值时，直接输入该值并回车或者使用浏览器提供的 console.log 方法即可。

`;

export const docString2 = `
> 四则运算符不再赘述，简单说一下自增（减）运算符：当一个索引变量需要加 1 或减 1 然后再赋值给自身时，比如（let 是 JS 声明变量的关键字，要启用一个变量，必须先声明）：

${reference('let i = 0; i = i + 1;')} 

> 时，我们可以简写为

${reference('let i = 0; i++;')} 

> 其中等号（=）为赋值操作，不是数学中的相等，下面将会讲到。

#### **赋值操作符**

`;

export const docString3 = `

> 由于 JS 是一门弱类型脚本语言，上面讲到的的操作符都是针对**数值类型**的数据进行操作的，对于其他类型的数据进行上述运算当然也不会报错，只是通常会返回 NaN（[数据类型一节，数字类型的备注中提及](/overview/javascript/data-type) ）值。试试 ${reference("let x = 3; x *= '字符串';")} 并打印 x 。
> 加运算可以用于字符串拼接，例如 ${reference("x = 'hello' + ', ' + 'world!'")}，打印 x 的值为 ${reference("'hello, world!'")}。

那么是不是不同的数据类型就不能相互运算呢？也不是。JS 存在隐式类型转换，类型不同的数据运算往往让人迷惑。例如控制台输入下面的代码并回车：

${reference('(!(~+[])+{})[--[~+""][+[]]*[~+[]] + ~~!+[]]+({}+[])[[~!+[]]*~+[]]')}

所以正常写代码，是不允许混淆数据类型进行各种操作的，不仅具有迷惑性，还很容易引入 bug。[类型转换的相关内容初学者作为了解，不必深究](https://www.runoob.com/js/js-type-conversion.html)

#### **比较运算符符**
`;

export const docString4 = `
> 上表中出现了数字字符串和数字相比较的情形，这里就涉及到了隐式类型转换。我们暂时对类型转换的认识，以下面三句话作为重点：

- 字符串与数字相加，等同于**字符串拼接**。如 ${reference('"Tom" + 123')} 结果为 ${reference('"Tom123"')}，不分先后顺序；
- 字符串与数字比较大小以及宽松相等判断 ${reference('>, <, >=, <=, ==, !=')}，要**将字符串转化为数字**，空串转换后为 0，即 ${reference("'' == 0")} 为真。
- 字符串与数字严格相等性判断时（${reference('===, !==')}）结果一定是不相等（类型不同就不会再比较值了）。

#### **逻辑运算符**
`;

export const docString5 = `
> 逻辑运算符不仅仅是对布尔值（true/false）的判断，更广泛地，是真假值（truthy/falsy）的判断，例如下面的计算结果（基本值的真假性先做了解，暂不背记，到工作中用到时，查几次就慢慢记住了，这里我们只关注逻辑运算的**短路特征**）：

`;

export const docString6 = `
### **三目运算符**

又称条件运算符、三元运算符。基本语法为：

> ${reference('condition ? value1 : value2')}，当 condition 值为 truthy 时，表达式运算结果为 value1，否则返回 value2。

> 例如：${reference('let value = true ? 5 : 3;')} 变量 value 的值为 5；

> 再如：${reference('let value = null ? 5 : 3;')} 变量 value 的值为 3；

三目运算符的内容就这么简单，你学会了吗？

> 至此，相对枯燥的基础部分介绍告一段落，未来的课程，均使用前面介绍的概念符号来组织逻辑。如果把一个项目成品比作一篇优秀的文章的话，那么前面的章节好比**文字或词组**，而后面的章节属于**语法层面**的学习。基础符号和文字 + 语法 = 完整的语句。

> 你，是否有些跃跃欲试了呢？[开启新篇章](/lesson/condition)
`;