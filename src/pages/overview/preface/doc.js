import hire1 from './1.png';
import hire2 from './2.png';
import { reference } from '@/util';

const JavaScript = reference('JavaScript');

const docString = `
### 前端有话说
${JavaScript} 诞生之初，仅仅是作为脚本语言，处理一些简单的页面交互。这相比于原始的静态网站，已经具有了极大的进步。
互联网世界日新月异，丰富的网页形态和媒体呈现，不断促进着 ${JavaScript} 的发展，使这门语言的标准和语法不断增强和完善。
通过借鉴其他语言的优势，${JavaScript} 成为了浏览器当中之无愧的神器，且已经迈向服务端甚至操作系统的领域。
前端开发者也不再局限于 “切图仔” 的角色、画页面等简单的职责，且在富媒体、在线办公等领域有了越来越多的施展空间。
那么前端的市场如何呢？这里有 2020 年来自 boss 直聘的招聘情况：

![2020招聘情况](${hire1})

![2020招聘情况](${hire2})

> 诚然招聘是有要求的，各个互联网公司学历要求是有差异的，学历没有优势的不必灰心，能力提上去，一样可以在普通的互联网公司有一席之地。毕竟你更关注的是薪资而不是给谁打工，不是吗？

### 课程简介
浏览完菜单栏是不是觉得内容比较多，有点望而却步了？别着急，如果你只是想学习 ${JavaScript} 本身，其实学完主菜单 **课程**
下的内容你的逻辑思维、编程基本能力就已经具备了。
只不过，我们从来不敢奢望刚从训练场出来，未经演戏实战模拟，就上了战场。也就是说，真正的知识运用是千变万化的，我们掌握了制造坚船利炮的知识，不代表我们拥有了制造坚船利炮的能力。而 **课程** 后面的章节的学习，就是让我们将知识转化为能力、经验的过程。
什么？学不动？看看那两张截图，再看看自己比脸还干净的裤兜~

- 整个课程体系（不限于 **课程** 菜单这一节）大致采用了难度循序渐进的顺序安排，建议学生们步步为营，稳扎稳打推进。
- **综述** 部分最多一星期，聪明的孩子两三天就完事了。
- **课程** 部分用三个月左右的时间（零基础）来学习。当然了，三个月对于职业生涯只是开始入门，凡事开头难，只要入了门，后面的学习方法和方向就会逐渐明晰。一个好消息是：本人一路走来的经验应该能够带领你少走弯路，从零开始一路进阶。过来人都知道，在没有前辈带领的情况下，成长可谓举步维艰，步步采坑。
- **ES6（ ${reference('ECMAScript 2015')}）** 是 TC39 （Technical Committee 39，简称TC39）在 2015 年发布的最具影响力的一版革命性的 ${JavaScript} 语言标准化规范。对于这之前的课程而言，它不属于新的知识点，而是对 JS 语法的改进、缺失部分的补充，所以单拎出来讲述。在目前的工作里已经成为一项必须熟悉的技能。ES6 之后，虽然每年都会有一些新的语言特性补充，但那只是少量的，可以在未来工作时学习到。因为 ES6 发布于 2015 年，所以也可以叫做 ES2015，而且未来均已以年份来命名版本。如 ES2019， ES2020……
- **流行框架** 框架不是编程语言本身的内容，框架的诞生是为了提升开发效率、降低维护成本，本质上是要求开发者在一种约定的格式内开发业务。同时框架也抹平了不同平台的差异性、兼容性，使开发者能专注于业务逻辑。因为这些脏乱的工作，也是滋生 bug 的温床。react、vue、angular 是当前最为流行的前端框架，对于初学者而言，vue 的上手成本最低。react 学习成本稍高，angular 也是 Google 维护的老牌前端框架了，不过近年来前两者风头正劲，有兴趣的可以在掌握前两者后自学。
### 实战练习
- 俗话说，百闻不如一见，百见不如一干；纸上得来终觉浅，绝知此事要躬行。这个阶段度过了，可以说你就拿到毕业证了。有条件的可以开始找实习了（如果不是毕业生，那就忽略薪资先进一家单位去历练吧）。记住，第一份工作，钱多少不重要！互联网不是铁饭碗，有能力了是可以重新选择的（良禽择木而栖）。

### 能力进阶
- 最后一个菜单下的内容对于 **中高级工程师** 来说必不可少。如果你想从事前端行业（这不废话吗），并且拿到自己满意的薪资，这一部分内容
千万不要忽略掉。当然，强烈建议初学者不要急于求成，这部分内容应当有**至少半年**的开发经验以后再来学习，否则很容易认知断层、知难而退。
`; 

export default docString;
